import cv2
import supervision as sv
from ultralytics import YOLO
import numpy as np
import time
import requests
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)

# Load YOLO model
model = YOLO('yolov8n.pt')

# Create annotators
bounding_box_annotator = sv.BoxAnnotator()
label_annotator = sv.LabelAnnotator()

# Initialize webcam
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)

logging.info("Camera initialized and ready.")

# Define constants
CONFIDENCE_THRESHOLD = 0.4
bottle_class_id = 39
utensil_class_ids = [44, 42, 41]

# Counter and timer for detecting a bottle continuously
bottle_detected = False
detection_start_time = None
detection_duration_threshold = 2  # seconds
bottle_counter = 0  # Keep track of how many bottles detected for sending updates

# Flask API URL
api_url = "http://localhost:5000/update_counter"  # Change to your Flask API URL if needed

while True:
    ret, frame = cap.read()

    if not ret:
        logging.error("Failed to capture frame. Exiting.")
        break

    # Get YOLO results
    results = model.predict(frame)

    if len(results) > 0:
        # Extract bounding boxes, confidence scores, and class IDs
        boxes = results[0].boxes.xyxy.cpu().numpy()
        confidences = results[0].boxes.conf.cpu().numpy()
        class_ids = results[0].boxes.cls.cpu().numpy().astype(int)

        # Filter based on confidence and class ID
        mask = (confidences > CONFIDENCE_THRESHOLD) & np.isin(class_ids, [bottle_class_id] + utensil_class_ids)
        filtered_boxes = boxes[mask]
        filtered_class_ids = class_ids[mask]
        filtered_confidences = confidences[mask]

        # Create detections object for supervision
        detections = sv.Detections(
            xyxy=filtered_boxes,
            confidence=filtered_confidences,
            class_id=filtered_class_ids
        )

        # Check for bottle detection
        bottle_in_frame = any(cls == bottle_class_id for cls in filtered_class_ids)

        if bottle_in_frame:
            if not bottle_detected:
                detection_start_time = time.time()
                bottle_detected = True
            else:
                elapsed_time = time.time() - detection_start_time
                if elapsed_time >= detection_duration_threshold:
                    # Instead of incrementing the counter, just send 1 for each detection
                    logging.info(f"Bottle detected for {detection_duration_threshold} seconds. Sending increment.")

                    # Send increment to Flask API
                    try:
                        response = requests.post(api_url, data={'bottle': 1})  # Send a count of 1
                        response.raise_for_status()
                        logging.info("Counter sent to API successfully.")
                    except requests.exceptions.RequestException as e:
                        logging.error(f"Failed to send counter to API: {e}")

                    # Reset timer
                    bottle_detected = False
                    detection_start_time = None
        else:
            bottle_detected = False
            detection_start_time = None

        # Annotate frame if there are detections
        annotated_image = frame  # Default to the original frame
        if len(filtered_boxes) > 0:
            annotated_image = bounding_box_annotator.annotate(scene=frame, detections=detections)
            annotated_image = label_annotator.annotate(scene=annotated_image, detections=detections)

    else:
        annotated_image = frame

    cv2.imshow('Camera Feed with Annotations', annotated_image)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        logging.info("'q' pressed, closing...")
        break

cap.release()
cv2.destroyAllWindows()
